import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys

import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.util.KeywordUtil
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.util.KeywordUtil
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.testobject.TestObject
import com.kms.katalon.core.mobile.keyword.internal.MobileDriverFactory

// M·ªü ·ª©ng d·ª•ng
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.testobject.TestObject
import com.kms.katalon.core.util.KeywordUtil
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.testobject.TestObject
import com.kms.katalon.core.util.KeywordUtil
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.util.KeywordUtil
import java.awt.image.BufferedImage
import javax.imageio.ImageIO
import java.io.File
Mobile.startApplication('C:\\Users\\trant\\Downloads\\FCdemo.apk', false)
Mobile.waitForElementPresent(findTestObject('Object Repository/Video'), 30) // ƒê·ª£i video hi·ªÉn th·ªã



// üé• H√†m t√≠nh s·ª± kh√°c bi·ªát gi·ªØa 2 ·∫£nh
double getImageDifference(BufferedImage img1, BufferedImage img2) {
	int width = Math.min(img1.getWidth(), img2.getWidth())  // ƒê·∫£m b·∫£o c√πng k√≠ch th∆∞·ªõc
	int height = Math.min(img1.getHeight(), img2.getHeight())
	long diff = 0

	for (int x = 0; x < width; x += 5) { // Gi·∫£m s·ªë pixel qu√©t ƒë·ªÉ tƒÉng t·ªëc
		for (int y = 0; y < height; y += 5) {
			int rgb1 = img1.getRGB(x, y)
			int rgb2 = img2.getRGB(x, y)
			diff += Math.abs((rgb1 & 0xFF) - (rgb2 & 0xFF)) // So s√°nh ƒë·ªô s√°ng pixel
		}
	}
	return (diff / (width * height)) // Tr·∫£ v·ªÅ m·ª©c ƒë·ªô kh√°c bi·ªát
}

// üì∏ Ch·ª•p 10 ·∫£nh li√™n ti·∫øp ƒë·ªÉ ki·ªÉm tra s·ª± thay ƒë·ªïi
List<BufferedImage> images = []
for (int i = 0; i < 2; i++) {
	// Ch·ª•p ·∫£nh v√† l∆∞u t·∫°m th·ªùi trong th∆∞ m·ª•c
	String screenshotPath = Mobile.takeScreenshot("screenshot_" + i + ".png")
	
	// ƒê·ªçc ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n v·ª´a ch·ª•p
	BufferedImage screenshot = ImageIO.read(new File(screenshotPath))
	images.add(screenshot)
	Thread.sleep(5000) // Ch·ªù 500ms gi·ªØa c√°c l·∫ßn ch·ª•p
}

// üìä T√≠nh t·ªïng s·ª± kh√°c bi·ªát gi·ªØa c√°c ·∫£nh li√™n ti·∫øp
double totalDifference = 0
for (int i = 1; i < images.size(); i++) {
	totalDifference += getImageDifference(images[i], images[i - 1])
}

// üßê X√°c ƒë·ªãnh c√≥ ph·∫£i video kh√¥ng?
double threshold = 5.0  // Ng∆∞·ª°ng thay ƒë·ªïi ƒë·ªÉ x√°c ƒë·ªãnh video
if (totalDifference > threshold) {
	KeywordUtil.logInfo("‚úÖ ƒê√¢y l√† video!")
} else {
	KeywordUtil.logInfo("‚ùå ƒê√¢y c√≥ th·ªÉ l√† ·∫£nh tƒ©nh ho·∫∑c loading animation.")
}

// Ch·ª•p nhi·ªÅu ·∫£nh li√™n ti·∫øp
//int numScreenshots = 6
//int delayBetweenShots = 2 // th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn ch·ª•p (gi√¢y)
//List<BufferedImage> images = []
//
//for (int i = 0; i < numScreenshots; i++) {
//	String path = "screenshot" + i + ".png"
//	Mobile.takeScreenshot(path)
//	images.add(ImageIO.read(new File(path)))
//	Mobile.delay(delayBetweenShots)
//}
//
//// H√†m t√≠nh s·ª± kh√°c bi·ªát gi·ªØa hai ·∫£nh
//double getImageDifference(BufferedImage img1, BufferedImage img2) {
//	int width = img1.getWidth()
//	int height = img1.getHeight()
//	long diff = 0
//
//	for (int x = 0; x < width; x++) {
//		for (int y = 0; y < height; y++) {
//			int rgb1 = img1.getRGB(x, y)
//			int rgb2 = img2.getRGB(x, y)
//			diff += Math.abs((rgb1 & 0xFF) - (rgb2 & 0xFF)) // So s√°nh ƒë·ªô s√°ng pixel
//		}
//	}
//	return diff / (width * height) // Tr·∫£ v·ªÅ ph·∫ßn trƒÉm kh√°c bi·ªát
//}
//
//// T√≠nh m·ª©c ƒë·ªô thay ƒë·ªïi gi·ªØa c√°c ·∫£nh
//double totalDifference = 0
//for (int i = 1; i < images.size(); i++) {
//	totalDifference += getImageDifference(images[i], images[i - 1])
//}
//
//double avgDifference = totalDifference / (numScreenshots - 1)
//
//// N·∫øu ƒë·ªô thay ƒë·ªïi trung b√¨nh th·∫•p => C√≥ th·ªÉ l√† loading
//if (avgDifference < 5) { // Ng∆∞·ª°ng 5% (tu·ª≥ ch·ªânh theo th·ª≠ nghi·ªám)
//	KeywordUtil.logInfo("‚ö†Ô∏è Ph√°t hi·ªán ho·∫°t ·∫£nh l·∫∑p l·∫°i => C√≥ th·ªÉ l√† loading.")
//} else {
//	KeywordUtil.logInfo("‚úÖ N·ªôi dung thay ƒë·ªïi li√™n t·ª•c => C√≥ th·ªÉ l√† video.")
//}
